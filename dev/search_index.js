var documenterSearchIndex = {"docs":
[{"location":"api/energy/#Energy-and-Advanced-Calculation-Macros","page":"Energy & Advanced Macros","title":"Energy & Advanced Calculation Macros","text":"","category":"section"},{"location":"api/energy/","page":"Energy & Advanced Macros","title":"Energy & Advanced Macros","text":"These macros perform energy calculations, geometry optimizations, and advanced molecular computations.","category":"page"},{"location":"api/energy/#Energy-Calculations","page":"Energy & Advanced Macros","title":"Energy Calculations","text":"","category":"section"},{"location":"api/energy/#OpenBabel.@calculate_energy","page":"Energy & Advanced Macros","title":"OpenBabel.@calculate_energy","text":"@calculate_energy(expr, forcefield=\"MMFF94\")\n\nCalculate the energy of molecules using a specified forcefield.\n\nArguments\n\nexpr: The expression to chain with\nforcefield: Forcefield to use for energy calculation. Available: \"MMFF94\" (default), \"MMFF94s\", \"UFF\", \"GAFF\", \"Ghemical\"\n\nExample\n\n@chain begin\n    @read_file(\"molecules.smi\", \"smi\")\n    @gen_3D_coords(\"fast\")\n    @calculate_energy(\"MMFF94\")\n    @output_as(\"energies.sdf\", \"sdf\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/energy/#OpenBabel.@minimize_energy","page":"Energy & Advanced Macros","title":"OpenBabel.@minimize_energy","text":"@minimize_energy(expr, forcefield=\"MMFF94\")\n\nMinimize the energy of molecules using a specified forcefield.\n\nArguments\n\nexpr: The expression to chain with\nforcefield: Forcefield to use for energy minimization. Available: \"MMFF94\" (default), \"MMFF94s\", \"UFF\", \"GAFF\", \"Ghemical\"\n\nExample\n\n@chain begin\n    @read_file(\"molecules.smi\", \"smi\")\n    @gen_3D_coords(\"fast\")\n    @minimize_energy(\"MMFF94\")\n    @output_as(\"minimized.sdf\", \"sdf\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/energy/#OpenBabel.@add_partial_charges","page":"Energy & Advanced Macros","title":"OpenBabel.@add_partial_charges","text":"@add_partial_charges(expr, method=\"gasteiger\")\n\nAdd partial charges to molecules using specified method.\n\nArguments\n\nexpr: The expression to chain with\nmethod: Charge calculation method. Available: \"gasteiger\" (default), \"mmff94\", \"qeq\", \"eqeq\", \"eem\"\n\nExample\n\n@chain begin\n    @read_file(\"molecules.smi\", \"smi\")\n    @gen_3D_coords(\"fast\")\n    @add_partial_charges(\"gasteiger\")\n    @output_as(\"charged.sdf\", \"sdf\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/energy/#Structure-Generation","page":"Energy & Advanced Macros","title":"Structure Generation","text":"","category":"section"},{"location":"api/energy/#OpenBabel.@canonicalize","page":"Energy & Advanced Macros","title":"OpenBabel.@canonicalize","text":"@canonicalize(expr)\n\nCanonicalize the atom order in molecules.\n\nExample\n\n@chain begin\n    @read_file(\"molecules.sdf\", \"sdf\")\n    @canonicalize()\n    @output_as(\"canonical.sdf\", \"sdf\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/energy/#OpenBabel.@generate_conformers","page":"Energy & Advanced Macros","title":"OpenBabel.@generate_conformers","text":"@generate_conformers(expr)\n\nGenerate conformers for molecules.\n\nExample\n\n@chain begin\n    @read_file(\"molecules.smi\", \"smi\")\n    @gen_3D_coords(\"fast\")\n    @generate_conformers()\n    @output_as(\"conformers.sdf\", \"sdf\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/energy/#Usage-Examples","page":"Energy & Advanced Macros","title":"Usage Examples","text":"","category":"section"},{"location":"api/energy/#Energy-Minimization-Workflow","page":"Energy & Advanced Macros","title":"Energy Minimization Workflow","text":"","category":"section"},{"location":"api/energy/","page":"Energy & Advanced Macros","title":"Energy & Advanced Macros","text":"Optimize molecular geometries using different forcefields:","category":"page"},{"location":"api/energy/","page":"Energy & Advanced Macros","title":"Energy & Advanced Macros","text":"# MMFF94 forcefield (default)\n@chain begin\n    @read_file(\"molecules.smi\", \"smi\")\n    @gen_3D_coords(\"fast\")\n    @minimize_energy(\"MMFF94\")\n    @calculate_energy(\"MMFF94\")\n    @output_as(\"optimized.sdf\", \"sdf\")\n    @execute\nend\n\n# UFF forcefield\n@chain begin\n    @read_file(\"molecules.smi\", \"smi\")\n    @gen_3D_coords(\"med\")\n    @minimize_energy(\"UFF\")\n    @output_as(\"uff_optimized.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"api/energy/#Available-Forcefields","page":"Energy & Advanced Macros","title":"Available Forcefields","text":"","category":"section"},{"location":"api/energy/","page":"Energy & Advanced Macros","title":"Energy & Advanced Macros","text":"Forcefield Description Best for\nMMFF94 Merck Molecular Force Field General organic molecules\nMMFF94s MMFF94 static Static conformations\nUFF Universal Force Field Broad chemical space\nGAFF General AMBER Force Field Drug-like molecules\nGhemical Ghemical Force Field Quick calculations","category":"page"},{"location":"api/energy/#Partial-Charge-Calculation","page":"Energy & Advanced Macros","title":"Partial Charge Calculation","text":"","category":"section"},{"location":"api/energy/","page":"Energy & Advanced Macros","title":"Energy & Advanced Macros","text":"Add partial charges using different methods:","category":"page"},{"location":"api/energy/","page":"Energy & Advanced Macros","title":"Energy & Advanced Macros","text":"# Gasteiger charges (default)\n@chain begin\n    @read_file(\"molecules.smi\", \"smi\")\n    @gen_3D_coords(\"fast\")\n    @add_partial_charges(\"gasteiger\")\n    @output_as(\"charged_molecules.sdf\", \"sdf\")\n    @execute\nend\n\n# MMFF94 charges\n@chain begin\n    @read_file(\"molecules.smi\", \"smi\")\n    @gen_3D_coords(\"fast\")\n    @add_partial_charges(\"mmff94\")\n    @output_as(\"mmff_charges.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"api/energy/#Available-Charge-Methods","page":"Energy & Advanced Macros","title":"Available Charge Methods","text":"","category":"section"},{"location":"api/energy/","page":"Energy & Advanced Macros","title":"Energy & Advanced Macros","text":"Method Description Accuracy Speed\ngasteiger Gasteiger-Marsili Medium Fast\nmmff94 MMFF94 charges High Medium\nqeq QEq charges Medium Fast\neqeq EQEq charges Medium Fast\neem Electronegativity Equalization Medium Medium","category":"page"},{"location":"api/energy/#Conformer-Generation","page":"Energy & Advanced Macros","title":"Conformer Generation","text":"","category":"section"},{"location":"api/energy/","page":"Energy & Advanced Macros","title":"Energy & Advanced Macros","text":"Generate multiple conformations:","category":"page"},{"location":"api/energy/","page":"Energy & Advanced Macros","title":"Energy & Advanced Macros","text":"@chain begin\n    @read_file(\"flexible_molecules.smi\", \"smi\")\n    @gen_3D_coords(\"med\")\n    @generate_conformers()\n    @minimize_energy(\"MMFF94\")\n    @output_as(\"conformers.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"api/energy/#Complete-Energy-Workflow","page":"Energy & Advanced Macros","title":"Complete Energy Workflow","text":"","category":"section"},{"location":"api/energy/","page":"Energy & Advanced Macros","title":"Energy & Advanced Macros","text":"Comprehensive energy calculation pipeline:","category":"page"},{"location":"api/energy/","page":"Energy & Advanced Macros","title":"Energy & Advanced Macros","text":"@chain begin\n    @read_file(\"compounds.smi\", \"smi\")\n    @gen_3D_coords(\"slow\")           # High-quality 3D structures\n    @canonicalize()                  # Standardize representation\n    @minimize_energy(\"MMFF94\")       # Optimize geometry\n    @add_partial_charges(\"mmff94\")   # Add partial charges\n    @calculate_energy(\"MMFF94\")      # Calculate final energy\n    @add_properties([\"MW\", \"logP\"])  # Add additional properties\n    @sort_by(\"Energy\")               # Sort by energy\n    @output_as(\"energy_ranked.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"api/energy/#Drug-Discovery-Pipeline","page":"Energy & Advanced Macros","title":"Drug Discovery Pipeline","text":"","category":"section"},{"location":"api/energy/","page":"Energy & Advanced Macros","title":"Energy & Advanced Macros","text":"Typical computational chemistry workflow for drug discovery:","category":"page"},{"location":"api/energy/","page":"Energy & Advanced Macros","title":"Energy & Advanced Macros","text":"@chain begin\n    @read_file(\"drug_candidates.smi\", \"smi\")\n    @ignore_bad_molecules()          # Skip invalid structures\n    @gen_3D_coords(\"med\")            # Generate 3D coordinates\n    @minimize_energy(\"MMFF94\")       # Energy minimization\n    @add_partial_charges(\"gasteiger\") # Add charges\n    @add_properties([\"MW\", \"logP\", \"TPSA\", \"HBD\", \"HBA\", \"rotors\"])\n    @match_smarts_string(\"[!Pb;!Hg;!As]\")  # Remove toxic elements\n    @sort_by_reverse(\"logP\")         # Rank by lipophilicity\n    @output_as(\"optimized_candidates.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"api/io/#Core-I/O-Macros","page":"Core I/O Macros","title":"Core I/O Macros","text":"","category":"section"},{"location":"api/io/","page":"Core I/O Macros","title":"Core I/O Macros","text":"These macros handle the fundamental input and output operations for molecular data files.","category":"page"},{"location":"api/io/#File-Input","page":"Core I/O Macros","title":"File Input","text":"","category":"section"},{"location":"api/io/#OpenBabel.@read_file","page":"Core I/O Macros","title":"OpenBabel.@read_file","text":"@read_file(file_path, file_format)\n\nRead molecules from an input file.\n\nArguments\n\nfile_path: Path to the input file\nfile_format: File format code (e.g., \"smi\", \"mol\", \"sdf\")\n\nExamples\n\n@read_file(\"molecules.smi\", \"smi\")\n@read_file(\"database.sdf\", \"sdf\")\n\n\n\n\n\n","category":"macro"},{"location":"api/io/#File-Output","page":"Core I/O Macros","title":"File Output","text":"","category":"section"},{"location":"api/io/#OpenBabel.@output_as","page":"Core I/O Macros","title":"OpenBabel.@output_as","text":"@output_as(expr, file_path, file_format)\n\nSpecify output file and format for the pipeline.\n\nArguments\n\nexpr: Previous command in the chain\nfile_path: Output file path\nfile_format: Output file format code\n\nExamples\n\n@chain begin\n    @read_file(\"input.smi\", \"smi\")\n    @output_as(\"output.mol\", \"mol\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/io/#OpenBabel.@write_multiple_files","page":"Core I/O Macros","title":"OpenBabel.@write_multiple_files","text":"@write_multiple_files(expr)\n\nWrite each molecule to a separate output file instead of one combined file.\n\nArguments\n\nexpr: Previous command in the chain\n\nExample\n\n@chain begin\n    @read_file(\"molecules.smi\", \"smi\")\n    @gen_3D_coords(\"fast\")\n    @write_multiple_files()\n    @output_as(\"molecule\", \"mol\")  # Creates molecule1.mol, molecule2.mol, etc.\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/io/#Pipeline-Execution","page":"Core I/O Macros","title":"Pipeline Execution","text":"","category":"section"},{"location":"api/io/#OpenBabel.@execute","page":"Core I/O Macros","title":"OpenBabel.@execute","text":"@execute(expr)\n\nExecute the constructed OpenBabel pipeline.\n\nArguments\n\nexpr: Complete command chain to execute\n\nExamples\n\n@chain begin\n    @read_file(\"input.smi\", \"smi\")\n    @gen_3D_coords(\"fast\")\n    @output_as(\"output.mol\", \"mol\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/io/#Usage-Examples","page":"Core I/O Macros","title":"Usage Examples","text":"","category":"section"},{"location":"api/io/#Basic-File-Conversion","page":"Core I/O Macros","title":"Basic File Conversion","text":"","category":"section"},{"location":"api/io/","page":"Core I/O Macros","title":"Core I/O Macros","text":"Convert SMILES to MOL format:","category":"page"},{"location":"api/io/","page":"Core I/O Macros","title":"Core I/O Macros","text":"@chain begin\n    @read_file(\"molecules.smi\", \"smi\")\n    @output_as(\"molecules.mol\", \"mol\")\n    @execute\nend","category":"page"},{"location":"api/io/#Multiple-Output-Files","page":"Core I/O Macros","title":"Multiple Output Files","text":"","category":"section"},{"location":"api/io/","page":"Core I/O Macros","title":"Core I/O Macros","text":"Create separate files for each molecule:","category":"page"},{"location":"api/io/","page":"Core I/O Macros","title":"Core I/O Macros","text":"@chain begin\n    @read_file(\"database.sdf\", \"sdf\")\n    @write_multiple_files()\n    @output_as(\"molecule\", \"mol\")  # Creates molecule1.mol, molecule2.mol, etc.\n    @execute\nend","category":"page"},{"location":"api/io/#Supported-File-Formats","page":"Core I/O Macros","title":"Supported File Formats","text":"","category":"section"},{"location":"api/io/","page":"Core I/O Macros","title":"Core I/O Macros","text":"The library supports all Open Babel file formats:","category":"page"},{"location":"api/io/","page":"Core I/O Macros","title":"Core I/O Macros","text":"Format Extension Description\nSMILES .smi Simplified molecular-input line-entry system\nSDF .sdf Structure-data file\nMOL .mol MDL Molfile\nXYZ .xyz XYZ coordinate format\nPDB .pdb Protein Data Bank format","category":"page"},{"location":"api/io/","page":"Core I/O Macros","title":"Core I/O Macros","text":"For a complete list, refer to the Open Babel documentation.","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This page provides comprehensive examples of using OpenBabel.jl for common molecular data processing tasks.","category":"page"},{"location":"examples/#Basic-File-Conversion","page":"Examples","title":"Basic File Conversion","text":"","category":"section"},{"location":"examples/#SMILES-to-SDF-Conversion","page":"Examples","title":"SMILES to SDF Conversion","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using OpenBabel\nusing Chain\n\n# Convert SMILES to SDF with 3D coordinates and properties\n@chain begin\n    @read_file(\"input.smi\", \"smi\")\n    @gen_3D_coords(\"fast\")\n    @add_properties([\"MW\", \"logP\", \"TPSA\"])\n    @output_as(\"output.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"examples/#Batch-File-Processing","page":"Examples","title":"Batch File Processing","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Process multiple molecules into separate files\n@chain begin\n    @read_file(\"database.smi\", \"smi\")\n    @gen_2D_coords()\n    @add_index()\n    @write_multiple_files()\n    @output_as(\"molecule\", \"mol\")  # Creates molecule1.mol, molecule2.mol, etc.\n    @execute\nend","category":"page"},{"location":"examples/#Drug-Discovery-Workflows","page":"Examples","title":"Drug Discovery Workflows","text":"","category":"section"},{"location":"examples/#Lead-Compound-Filtering","page":"Examples","title":"Lead Compound Filtering","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Filter compounds by Lipinski's Rule of Five\n@chain begin\n    @read_file(\"compound_library.sdf\", \"sdf\")\n    @add_properties([\"MW\", \"logP\", \"HBD\", \"HBA\"])\n    @match_smarts_string(\"[!#1]\")  # Must contain non-hydrogen atoms\n    @sort_by(\"MW\")\n    @output_as(\"filtered_compounds.sdf\", \"sdf\")\n    @execute\nend\n\n# Additional filtering can be done in Julia\n# Filter by Lipinski's Rule of Five criteria","category":"page"},{"location":"examples/#Virtual-Screening-Pipeline","page":"Examples","title":"Virtual Screening Pipeline","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Prepare compounds for virtual screening\n@chain begin\n    @read_file(\"screening_library.smi\", \"smi\")\n    @ignore_bad_molecules()\n    @remove_duplicate_mols()\n    @gen_3D_coords(\"med\")\n    @minimize_energy(\"MMFF94\")\n    @add_partial_charges(\"gasteiger\")\n    @canonicalize()\n    @add_properties([\"MW\", \"logP\", \"TPSA\", \"rotors\"])\n    @sort_by_reverse(\"MW\")\n    @output_as(\"screening_ready.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"examples/#Chemical-Database-Processing","page":"Examples","title":"Chemical Database Processing","text":"","category":"section"},{"location":"examples/#Large-Dataset-Cleaning","page":"Examples","title":"Large Dataset Cleaning","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Clean and standardize a large chemical database\n@chain begin\n    @read_file(\"raw_database.sdf\", \"sdf\")\n    @ignore_bad_molecules()          # Skip invalid structures\n    @remove_duplicate_mols()         # Remove duplicates\n    @separate_fragments()            # Split salt complexes\n    @remove_hydrogens()              # Use implicit hydrogens\n    @set_atom_order_canonical()      # Standardize atom ordering\n    @dont_match_smarts_string(\"[Na,K,Cl,Br]\")  # Remove simple salts\n    @add_properties([\"MW\", \"atoms\", \"bonds\"])\n    @sort_by(\"MW\")\n    @output_as(\"clean_database.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"examples/#Property-Based-Filtering","page":"Examples","title":"Property-Based Filtering","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Extract drug-like molecules based on molecular properties\n@chain begin\n    @read_file(\"compound_collection.sdf\", \"sdf\")\n    @add_properties([\"MW\", \"logP\", \"TPSA\", \"HBD\", \"HBA\", \"rotors\"])\n    # Following steps would need additional Julia filtering\n    @match_smarts_string(\"[#6,#7,#8,#16,#15,#9,#17,#35,#53]\")  # Common drug atoms\n    @dont_match_smarts_string(\"[Pb,Hg,As,Cd]\")  # Exclude toxic metals\n    @output_as(\"druglike_molecules.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"examples/#Structure-Activity-Relationships","page":"Examples","title":"Structure-Activity Relationships","text":"","category":"section"},{"location":"examples/#Scaffold-Analysis","page":"Examples","title":"Scaffold Analysis","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Generate molecular scaffolds for SAR analysis\n@chain begin\n    @read_file(\"active_compounds.sdf\", \"sdf\")\n    @remove_hydrogens()\n    @set_atom_order_canonical()\n    @add_properties([\"MW\", \"rotors\", \"rings\"])\n    @sort_by(\"rings\")\n    @output_as(\"scaffolds.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"examples/#Conformer-Generation-for-Flexibility-Analysis","page":"Examples","title":"Conformer Generation for Flexibility Analysis","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Generate conformers to study molecular flexibility\n@chain begin\n    @read_file(\"flexible_molecules.smi\", \"smi\")\n    @gen_3D_coords(\"slow\")\n    @generate_conformers()\n    @minimize_energy(\"MMFF94\")\n    @calculate_energy(\"MMFF94\")\n    @add_properties([\"rotors\", \"MW\"])\n    @sort_by(\"Energy\")\n    @output_as(\"conformer_ensemble.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"examples/#Specialized-Chemical-Applications","page":"Examples","title":"Specialized Chemical Applications","text":"","category":"section"},{"location":"examples/#Natural-Product-Processing","page":"Examples","title":"Natural Product Processing","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Process natural product structures\n@chain begin\n    @read_file(\"natural_products.sdf\", \"sdf\")\n    @ignore_bad_molecules()\n    @gen_3D_coords(\"slow\")  # High quality for complex structures\n    @center_coords_at_zero()\n    @add_properties([\"MW\", \"logP\", \"TPSA\", \"rings\", \"stereocenters\"])\n    @dont_match_smarts_string(\"[Si,B,Al]\")  # Remove unusual atoms\n    @sort_by_reverse(\"rings\")  # Complex ring systems first\n    @output_as(\"processed_np.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"examples/#Fragment-Library-Generation","page":"Examples","title":"Fragment Library Generation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Create fragment library from larger molecules\n@chain begin\n    @read_file(\"parent_compounds.smi\", \"smi\")\n    @separate_fragments()        # Split into fragments\n    @remove_duplicate_mols()     # Remove duplicate fragments\n    @match_smarts_string(\"[#6,#7,#8]\")  # Keep C, N, O containing fragments\n    @add_properties([\"MW\", \"atoms\", \"HBA\", \"HBD\"])\n    @sort_by(\"MW\")\n    @output_as(\"fragment_library.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"examples/#Quality-Control-and-Validation","page":"Examples","title":"Quality Control and Validation","text":"","category":"section"},{"location":"examples/#Structure-Validation-Pipeline","page":"Examples","title":"Structure Validation Pipeline","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Validate and clean chemical structures\n@chain begin\n    @read_file(\"unchecked_structures.sdf\", \"sdf\")\n    @ignore_bad_molecules()      # Skip unparseable structures\n    @canonicalize()              # Standardize representation\n    @convert_dative_bonds()      # Handle coordination bonds\n    @add_properties([\"formula\", \"MW\", \"atoms\", \"bonds\"])\n    @add_filename()              # Track original source\n    @add_index()                 # Add unique identifiers\n    @output_as(\"validated_structures.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"examples/#Duplicate-Detection-and-Removal","page":"Examples","title":"Duplicate Detection and Removal","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Advanced duplicate detection workflow\n@chain begin\n    @read_file(\"merged_database.sdf\", \"sdf\")\n    @canonicalize()              # Ensure consistent representation\n    @remove_hydrogens()          # Compare without explicit H\n    @set_atom_order_canonical()  # Standard atom ordering\n    @remove_duplicate_mols()     # Remove exact duplicates\n    @add_properties([\"InChI\"])   # Add InChI for further comparison\n    @sort_by(\"MW\")\n    @output_as(\"deduplicated_database.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"examples/#Performance-Optimization","page":"Examples","title":"Performance Optimization","text":"","category":"section"},{"location":"examples/#Processing-Large-Datasets-Efficiently","page":"Examples","title":"Processing Large Datasets Efficiently","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Efficient processing of large chemical databases\nfunction process_large_database(input_file, output_file, start_idx=1, batch_size=10000)\n    current_idx = start_idx\n    batch_num = 1\n\n    while true\n        try\n            @chain begin\n                @read_file(input_file, \"sdf\")\n                @start_with_index(current_idx)\n                @ignore_bad_molecules()\n                @add_properties([\"MW\", \"logP\"])\n                @output_as(\"$(output_file)_batch_$(batch_num).sdf\", \"sdf\")\n                @execute\n            end\n\n            current_idx += batch_size\n            batch_num += 1\n        catch\n            break  # End of file reached\n        end\n    end\nend\n\n# Usage\nprocess_large_database(\"huge_database.sdf\", \"processed\", 1, 5000)","category":"page"},{"location":"examples/#Memory-Efficient-Processing","page":"Examples","title":"Memory-Efficient Processing","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Process files in chunks to manage memory usage\n@chain begin\n    @read_file(\"large_dataset.sdf\", \"sdf\")\n    @start_with_index(1)         # Start from beginning\n    @ignore_bad_molecules()      # Skip problematic structures\n    @gen_3D_coords(\"fast\")       # Use fast method for efficiency\n    @add_properties([\"MW\"])      # Minimal properties for speed\n    @write_multiple_files()      # Separate files reduce memory\n    @output_as(\"chunk\", \"sdf\")   # Creates chunk1.sdf, chunk2.sdf, etc.\n    @execute\nend","category":"page"},{"location":"api/properties/#Property-and-Coordinate-Macros","page":"Property & Coordinate Macros","title":"Property & Coordinate Macros","text":"","category":"section"},{"location":"api/properties/","page":"Property & Coordinate Macros","title":"Property & Coordinate Macros","text":"These macros add molecular properties, generate coordinates, and modify molecular metadata.","category":"page"},{"location":"api/properties/#Property-Calculation","page":"Property & Coordinate Macros","title":"Property Calculation","text":"","category":"section"},{"location":"api/properties/#OpenBabel.@add_properties","page":"Property & Coordinate Macros","title":"OpenBabel.@add_properties","text":"@add_properties(expr, props)\n\nAdd calculated molecular properties to the output.\n\nArguments\n\nexpr: Previous command in the chain\nprops: Vector of property names (e.g., [\"MW\", \"logP\", \"TPSA\"])\n\nExample\n\n@chain begin\n    @read_file(\"molecules.smi\", \"smi\")\n    @add_properties([\"MW\", \"logP\", \"HBD\", \"HBA\"])\n    @output_as(\"molecules_with_props.sdf\", \"sdf\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/properties/#Available-Descriptors","page":"Property & Coordinate Macros","title":"Available Descriptors","text":"","category":"section"},{"location":"api/properties/","page":"Property & Coordinate Macros","title":"Property & Coordinate Macros","text":"The get_available_descriptors() function returns a list of all molecular descriptors that can be calculated. If this function is not yet implemented, refer to the Open Babel documentation for available descriptors.","category":"page"},{"location":"api/properties/#Coordinate-Generation","page":"Property & Coordinate Macros","title":"Coordinate Generation","text":"","category":"section"},{"location":"api/properties/#OpenBabel.@gen_3D_coords","page":"Property & Coordinate Macros","title":"OpenBabel.@gen_3D_coords","text":"@gen_3D_coords(expr, speed)\n\nGenerate 3D coordinates for molecules.\n\nArguments\n\nexpr: Previous command in the chain\nspeed: Generation speed (\"fast\", \"med\", \"slow\")\n\nExample\n\n@chain begin\n    @read_file(\"input.smi\", \"smi\")\n    @gen_3D_coords(\"fast\")\n    @output_as(\"output_3d.mol\", \"mol\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/properties/#OpenBabel.@gen_2D_coords","page":"Property & Coordinate Macros","title":"OpenBabel.@gen_2D_coords","text":"@gen_2D_coords(expr)\n\nGenerate 2D coordinates for molecules.\n\nExample\n\n@chain begin\n    @read_file(\"input.smi\", \"smi\")\n    @gen_2D_coords()\n    @output_as(\"output_2d.mol\", \"mol\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/properties/#OpenBabel.@center_coords_at_zero","page":"Property & Coordinate Macros","title":"OpenBabel.@center_coords_at_zero","text":"@center_coords_at_zero(expr)\n\nCenter the molecular coordinates at the origin (0,0,0).\n\nArguments\n\nexpr: Previous command in the chain\n\nExample\n\n@chain begin\n    @read_file(\"molecules.mol\", \"mol\")\n    @center_coords_at_zero()\n    @output_as(\"centered_molecules.mol\", \"mol\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/properties/#Metadata-Addition","page":"Property & Coordinate Macros","title":"Metadata Addition","text":"","category":"section"},{"location":"api/properties/#OpenBabel.@add_filename","page":"Property & Coordinate Macros","title":"OpenBabel.@add_filename","text":"@add_filename(expr)\n\nAdd the original filename as a property to each molecule in the output.\n\nArguments\n\nexpr: Previous command in the chain\n\nExample\n\n@chain begin\n    @read_file(\"molecules.smi\", \"smi\")\n    @add_filename()\n    @output_as(\"output_with_filenames.sdf\", \"sdf\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/properties/#OpenBabel.@add_index","page":"Property & Coordinate Macros","title":"OpenBabel.@add_index","text":"@add_index(expr)\n\nAdd a sequential index number to each molecule in the output.\n\nArguments\n\nexpr: Previous command in the chain\n\nExample\n\n@chain begin\n    @read_file(\"database.sdf\", \"sdf\")\n    @add_index()\n    @output_as(\"indexed_molecules.sdf\", \"sdf\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/properties/#OpenBabel.@add_title","page":"Property & Coordinate Macros","title":"OpenBabel.@add_title","text":"@add_title(expr, title)\n\nAdd a custom title to each molecule in the output.\n\nArguments\n\nexpr: Previous command in the chain\ntitle: Title string to add to molecules\n\nExample\n\n@chain begin\n    @read_file(\"compounds.smi\", \"smi\")\n    @add_title(\"Processed Compounds\")\n    @output_as(\"titled_compounds.sdf\", \"sdf\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/properties/#Usage-Examples","page":"Property & Coordinate Macros","title":"Usage Examples","text":"","category":"section"},{"location":"api/properties/#Adding-Molecular-Properties","page":"Property & Coordinate Macros","title":"Adding Molecular Properties","text":"","category":"section"},{"location":"api/properties/","page":"Property & Coordinate Macros","title":"Property & Coordinate Macros","text":"Calculate common molecular descriptors:","category":"page"},{"location":"api/properties/","page":"Property & Coordinate Macros","title":"Property & Coordinate Macros","text":"@chain begin\n    @read_file(\"molecules.smi\", \"smi\")\n    @add_properties([\"MW\", \"logP\", \"TPSA\", \"HBD\", \"HBA\"])\n    @output_as(\"molecules_with_props.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"api/properties/#Available-Properties","page":"Property & Coordinate Macros","title":"Available Properties","text":"","category":"section"},{"location":"api/properties/","page":"Property & Coordinate Macros","title":"Property & Coordinate Macros","text":"Get a list of all available descriptors:","category":"page"},{"location":"api/properties/","page":"Property & Coordinate Macros","title":"Property & Coordinate Macros","text":"descriptors = get_available_descriptors()\nprintln(descriptors)","category":"page"},{"location":"api/properties/","page":"Property & Coordinate Macros","title":"Property & Coordinate Macros","text":"Common properties include:","category":"page"},{"location":"api/properties/","page":"Property & Coordinate Macros","title":"Property & Coordinate Macros","text":"MW - Molecular weight\nlogP - Partition coefficient\nTPSA - Topological polar surface area\nHBD - Hydrogen bond donors\nHBA - Hydrogen bond acceptors\nrotors - Number of rotatable bonds\natoms - Number of atoms\nbonds - Number of bonds","category":"page"},{"location":"api/properties/#3D-Coordinate-Generation","page":"Property & Coordinate Macros","title":"3D Coordinate Generation","text":"","category":"section"},{"location":"api/properties/","page":"Property & Coordinate Macros","title":"Property & Coordinate Macros","text":"Generate 3D structures with different quality levels:","category":"page"},{"location":"api/properties/","page":"Property & Coordinate Macros","title":"Property & Coordinate Macros","text":"# Fast generation (good for large datasets)\n@chain begin\n    @read_file(\"input.smi\", \"smi\")\n    @gen_3D_coords(\"fast\")\n    @output_as(\"output_3d.mol\", \"mol\")\n    @execute\nend\n\n# Higher quality (slower)\n@chain begin\n    @read_file(\"input.smi\", \"smi\")\n    @gen_3D_coords(\"slow\")\n    @center_coords_at_zero()\n    @output_as(\"centered_3d.mol\", \"mol\")\n    @execute\nend","category":"page"},{"location":"api/properties/#Adding-Metadata","page":"Property & Coordinate Macros","title":"Adding Metadata","text":"","category":"section"},{"location":"api/properties/","page":"Property & Coordinate Macros","title":"Property & Coordinate Macros","text":"Add indices and filenames to track molecule origins:","category":"page"},{"location":"api/properties/","page":"Property & Coordinate Macros","title":"Property & Coordinate Macros","text":"@chain begin\n    @read_file(\"database.sdf\", \"sdf\")\n    @add_index()\n    @add_filename()\n    @add_title(\"Processed Database\")\n    @output_as(\"indexed_molecules.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"api/filtering/#Filtering-and-Matching-Macros","page":"Filtering & Matching Macros","title":"Filtering & Matching Macros","text":"","category":"section"},{"location":"api/filtering/","page":"Filtering & Matching Macros","title":"Filtering & Matching Macros","text":"These macros filter, sort, and manipulate molecular datasets based on structural patterns and properties.","category":"page"},{"location":"api/filtering/#Pattern-Matching","page":"Filtering & Matching Macros","title":"Pattern Matching","text":"","category":"section"},{"location":"api/filtering/#OpenBabel.@match_smarts_string","page":"Filtering & Matching Macros","title":"OpenBabel.@match_smarts_string","text":"@match_smarts_string(expr, pattern)\n\nFilter molecules that match a SMARTS pattern.\n\nArguments\n\nexpr: Previous command in the chain\npattern: SMARTS pattern string\n\nExample\n\n# Keep only molecules with benzene rings\n@chain begin\n    @read_file(\"database.smi\", \"smi\")\n    @match_smarts_string(\"c1ccccc1\")\n    @output_as(\"benzene_compounds.smi\", \"smi\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/filtering/#OpenBabel.@dont_match_smarts_string","page":"Filtering & Matching Macros","title":"OpenBabel.@dont_match_smarts_string","text":"@dont_match_smarts_string(expr, pattern)\n\nExclude molecules that match a SMARTS pattern.\n\nExample\n\n# Remove molecules with benzene rings\n@chain begin\n    @read_file(\"database.smi\", \"smi\")\n    @dont_match_smarts_string(\"c1ccccc1\")\n    @output_as(\"no_benzene.smi\", \"smi\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/filtering/#Sorting-and-Deduplication","page":"Filtering & Matching Macros","title":"Sorting and Deduplication","text":"","category":"section"},{"location":"api/filtering/#OpenBabel.@sort_by","page":"Filtering & Matching Macros","title":"OpenBabel.@sort_by","text":"@sort_by(expr, property)\n\nSort molecules by a property in ascending order.\n\nArguments\n\nexpr: Previous command in the chain\nproperty: Property name (\"MW\", \"logP\", \"TPSA\", etc.)\n\nExample\n\n@chain begin\n    @read_file(\"molecules.sdf\", \"sdf\")\n    @add_properties([\"MW\"])\n    @sort_by(\"MW\")\n    @output_as(\"sorted_by_mw.sdf\", \"sdf\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/filtering/#OpenBabel.@sort_by_reverse","page":"Filtering & Matching Macros","title":"OpenBabel.@sort_by_reverse","text":"@sort_by_reverse(expr, property)\n\nSort molecules by a property in descending order.\n\nExample\n\n@chain begin\n    @read_file(\"molecules.sdf\", \"sdf\")\n    @add_properties([\"logP\"])\n    @sort_by_reverse(\"logP\")  # Highest logP first\n    @output_as(\"sorted_by_logp_desc.sdf\", \"sdf\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/filtering/#OpenBabel.@remove_duplicate_mols","page":"Filtering & Matching Macros","title":"OpenBabel.@remove_duplicate_mols","text":"@remove_duplicate_mols(expr)\n\nRemove duplicate molecules from the dataset.\n\nExample\n\n@chain begin\n    @read_file(\"database.smi\", \"smi\")\n    @remove_duplicate_mols()\n    @output_as(\"unique_molecules.smi\", \"smi\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/filtering/#Structural-Modifications","page":"Filtering & Matching Macros","title":"Structural Modifications","text":"","category":"section"},{"location":"api/filtering/#OpenBabel.@convert_dative_bonds","page":"Filtering & Matching Macros","title":"OpenBabel.@convert_dative_bonds","text":"@convert_dative_bonds(expr)\n\nConvert dative bonds (coordinate covalent bonds) to normal bonds in the molecular representation.\n\nArguments\n\nexpr: Previous command in the chain\n\nExample\n\n@chain begin\n    @read_file(\"coordination_compounds.mol\", \"mol\")\n    @convert_dative_bonds()\n    @output_as(\"converted_bonds.mol\", \"mol\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/filtering/#OpenBabel.@remove_hydrogens","page":"Filtering & Matching Macros","title":"OpenBabel.@remove_hydrogens","text":"@remove_hydrogens(expr)\n\nRemove explicit hydrogen atoms from the molecular structure.\n\nArguments\n\nexpr: Previous command in the chain\n\nExample\n\n@chain begin\n    @read_file(\"explicit_h_molecules.mol\", \"mol\")\n    @remove_hydrogens()\n    @output_as(\"implicit_h_molecules.mol\", \"mol\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/filtering/#OpenBabel.@set_atom_order_canonical","page":"Filtering & Matching Macros","title":"OpenBabel.@set_atom_order_canonical","text":"@set_atom_order_canonical(expr)\n\nReorder atoms in molecules to follow a canonical (standardized) ordering.\n\nArguments\n\nexpr: Previous command in the chain\n\nExample\n\n@chain begin\n    @read_file(\"unordered_molecules.smi\", \"smi\")\n    @set_atom_order_canonical()\n    @output_as(\"canonical_molecules.smi\", \"smi\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/filtering/#OpenBabel.@separate_fragments","page":"Filtering & Matching Macros","title":"OpenBabel.@separate_fragments","text":"@separate_fragments(expr)\n\nSeparate multi-fragment molecules into individual fragments as separate molecules.\n\nArguments\n\nexpr: Previous command in the chain\n\nExample\n\n@chain begin\n    @read_file(\"salt_complexes.smi\", \"smi\")\n    @separate_fragments()\n    @output_as(\"individual_fragments.smi\", \"smi\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/filtering/#Data-Processing","page":"Filtering & Matching Macros","title":"Data Processing","text":"","category":"section"},{"location":"api/filtering/#OpenBabel.@ignore_bad_molecules","page":"Filtering & Matching Macros","title":"OpenBabel.@ignore_bad_molecules","text":"@ignore_bad_molecules(expr)\n\nSkip molecules that cannot be parsed or contain errors, continuing with valid molecules.\n\nArguments\n\nexpr: Previous command in the chain\n\nExample\n\n@chain begin\n    @read_file(\"mixed_quality_data.smi\", \"smi\")\n    @ignore_bad_molecules()\n    @gen_3D_coords(\"fast\")\n    @output_as(\"valid_molecules.sdf\", \"sdf\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/filtering/#OpenBabel.@start_with_index","page":"Filtering & Matching Macros","title":"OpenBabel.@start_with_index","text":"@start_with_index(expr, idx)\n\nStart processing molecules from a specific index in the input file.\n\nArguments\n\nexpr: Previous command in the chain\nidx: Starting index (1-based indexing)\n\nExample\n\n@chain begin\n    @read_file(\"large_database.sdf\", \"sdf\")\n    @start_with_index(100)  # Start from the 100th molecule\n    @add_properties([\"MW\"])\n    @output_as(\"subset_molecules.sdf\", \"sdf\")\n    @execute\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/filtering/#Usage-Examples","page":"Filtering & Matching Macros","title":"Usage Examples","text":"","category":"section"},{"location":"api/filtering/#SMARTS-Pattern-Filtering","page":"Filtering & Matching Macros","title":"SMARTS Pattern Filtering","text":"","category":"section"},{"location":"api/filtering/","page":"Filtering & Matching Macros","title":"Filtering & Matching Macros","text":"Filter molecules containing benzene rings:","category":"page"},{"location":"api/filtering/","page":"Filtering & Matching Macros","title":"Filtering & Matching Macros","text":"@chain begin\n    @read_file(\"database.smi\", \"smi\")\n    @match_smarts_string(\"c1ccccc1\")  # Aromatic benzene ring\n    @output_as(\"benzene_compounds.smi\", \"smi\")\n    @execute\nend","category":"page"},{"location":"api/filtering/","page":"Filtering & Matching Macros","title":"Filtering & Matching Macros","text":"Exclude molecules with specific functional groups:","category":"page"},{"location":"api/filtering/","page":"Filtering & Matching Macros","title":"Filtering & Matching Macros","text":"@chain begin\n    @read_file(\"compounds.smi\", \"smi\")\n    @dont_match_smarts_string(\"[OH]\")  # Remove alcohols\n    @output_as(\"no_alcohols.smi\", \"smi\")\n    @execute\nend","category":"page"},{"location":"api/filtering/#Common-SMARTS-Patterns","page":"Filtering & Matching Macros","title":"Common SMARTS Patterns","text":"","category":"section"},{"location":"api/filtering/","page":"Filtering & Matching Macros","title":"Filtering & Matching Macros","text":"Pattern Description\nc1ccccc1 Benzene ring\n[OH] Hydroxyl group\n[NH2] Primary amine\nC=O Carbonyl group\n[#6]=[#8] Carbon double bonded to oxygen\n[R] Any atom in a ring","category":"page"},{"location":"api/filtering/#Sorting-by-Properties","page":"Filtering & Matching Macros","title":"Sorting by Properties","text":"","category":"section"},{"location":"api/filtering/","page":"Filtering & Matching Macros","title":"Filtering & Matching Macros","text":"Sort molecules by molecular weight:","category":"page"},{"location":"api/filtering/","page":"Filtering & Matching Macros","title":"Filtering & Matching Macros","text":"@chain begin\n    @read_file(\"molecules.sdf\", \"sdf\")\n    @add_properties([\"MW\"])\n    @sort_by(\"MW\")  # Ascending order\n    @output_as(\"sorted_by_mw.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"api/filtering/","page":"Filtering & Matching Macros","title":"Filtering & Matching Macros","text":"Sort by logP in descending order:","category":"page"},{"location":"api/filtering/","page":"Filtering & Matching Macros","title":"Filtering & Matching Macros","text":"@chain begin\n    @read_file(\"molecules.sdf\", \"sdf\")\n    @add_properties([\"logP\"])\n    @sort_by_reverse(\"logP\")  # Descending order\n    @output_as(\"high_logp_first.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"api/filtering/#Data-Cleaning-Workflow","page":"Filtering & Matching Macros","title":"Data Cleaning Workflow","text":"","category":"section"},{"location":"api/filtering/","page":"Filtering & Matching Macros","title":"Filtering & Matching Macros","text":"Complete data cleaning and processing pipeline:","category":"page"},{"location":"api/filtering/","page":"Filtering & Matching Macros","title":"Filtering & Matching Macros","text":"@chain begin\n    @read_file(\"raw_data.smi\", \"smi\")\n    @ignore_bad_molecules()      # Skip invalid molecules\n    @remove_duplicate_mols()     # Remove duplicates\n    @remove_hydrogens()          # Implicit hydrogens\n    @set_atom_order_canonical()  # Standardize atom order\n    @separate_fragments()        # Split salts/complexes\n    @match_smarts_string(\"[!#1]\")  # Keep non-hydrogen containing\n    @output_as(\"cleaned_data.smi\", \"smi\")\n    @execute\nend","category":"page"},{"location":"api/filtering/#Processing-Large-Datasets","page":"Filtering & Matching Macros","title":"Processing Large Datasets","text":"","category":"section"},{"location":"api/filtering/","page":"Filtering & Matching Macros","title":"Filtering & Matching Macros","text":"Start processing from a specific molecule index:","category":"page"},{"location":"api/filtering/","page":"Filtering & Matching Macros","title":"Filtering & Matching Macros","text":"@chain begin\n    @read_file(\"huge_database.sdf\", \"sdf\")\n    @start_with_index(1000)  # Begin from molecule 1000\n    @add_properties([\"MW\", \"logP\"])\n    @sort_by(\"MW\")\n    @output_as(\"subset_processed.sdf\", \"sdf\")\n    @execute\nend","category":"page"},{"location":"#OpenBabel.jl","page":"Home","title":"OpenBabel.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia library for reading, writing, and transforming chemical data, powered by Open Babel.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"OpenBabel\")","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using OpenBabel\nusing Chain\n\n# Write some random molecules to a file\nopen(\"./test_input.smi\", \"w\") do io\n    write(io, \"CC(=O)NC1=CC=C(C=C1)O\\n\")\n    write(io, \"Cn1cnc2c1c(=O)n(c(=O)n2C)\\n\")\n    write(io, \"c1ccc(cc1)[N+](=O)[O-]\\n\")\nend\n\n# Convert and process molecules\n@chain begin\n    @read_file(\"./test_input.smi\", \"smi\")\n    @output_as(\"out.mol\", \"mol\")\n    @gen_3D_coords(\"fast\")\n    @sort_by(\"logP\")\n    @add_properties([\"MW\"])\n    @execute\nend","category":"page"},{"location":"#Core-Concepts","page":"Home","title":"Core Concepts","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OpenBabel.jl provides a macro-based API that chains operations together, replicating Open Babel's command-line functionality:","category":"page"},{"location":"","page":"Home","title":"Home","text":"obabel -iformat_1 file_1 -oformat_2 -O file_2 -arg_1 ... -arg_n","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each macro corresponds to a specific Open Babel operation and can be combined using Julia's @chain macro for readable, pipeline-style molecular data processing.","category":"page"}]
}
